// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Aqui é onde vamos criar as tabelas

//Antes da aula 2 parte - 2 next Auth, era assim, mas depois atualizei
// model User{
//   id       String    @id @default(uuid())
//   name     String?
//     bookings Booking[]
// }

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  //Estabelecendo as relações das tabelas
  bookings      Booking[]
}

model Barbershop {
  id       String    @id @default(uuid())
  name     String
  address  String
  imageUrl String
  //Estabelecendo as relações das tabelas
  bookings Booking[]
  services Service[]
}

model Service {
  id           String     @id @default(uuid())
  name         String
  price        Decimal    @db.Decimal(10, 2)
  //Estabelecendo uma relação one to many de barbershop par ao service
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  description  String
  //Estabelecendo as relações das tabelas
  bookings     Booking[]
  imageUrl     String
}

model Booking {
  //Estabelecendo as relações
  id           String     @id @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  serviceId    String
  service      Service    @relation(fields: [serviceId], references: [id])
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
}

//Rodei npx prisma format para formatar, e adicionar as relações

//Aula 2 parte -> 2 Criei essas tabelas que ja vem na documentação do next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
